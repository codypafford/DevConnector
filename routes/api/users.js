const express = require("express");
const router = express.Router();
const gravatar = require("gravatar");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const config = require("config");
const { check, validationResult } = require("express-validator"); // used so we can validate the request with the check functions below

// this module is basically used for registration
const User = require("../../models/User");

// @route  POST api/users
// @desc   Register user
// @access Public - no need for token!!
// this will listen for incoming POST requests
router.post(
  "/",
  [
    // check the request and put any errors inside of validationResult array
    check("name", "Name is required").not().isEmpty(),
    check("email", "Please include a valid email").isEmail(),
    check(
      "password",
      "Please enter a password with 6 or more characters"
    ).isLength({ min: 6 }),
  ],
  async (req, res) => {
    const errors = validationResult(req);
    // check if error array is empty or not
    if (!errors.isEmpty()) {
      // send response back to client
      return res.status(400).json({ errors: errors.array() });
    }

    // get name, email, password from req.body
    const { name, email, password } = req.body;

    try {
      // See if user exists in the mongoDB
      let user = await User.findOne({ email: email });

      if (user) {
        return res
          .status(400)
          .json({ errors: [{ msg: "User already exists" }] });
      }

      // Get users gravatar
      const avatar = gravatar.url(email, {
        s: "200", // size
        r: "pg", // pg instead of rated R stuff
        d: "mm", // default avatar
      });

      user = new User({
        name,
        email,
        avatar,
        password,
      }); // create user using the model User

      // Encrypt password (anything that returns a promise, we put await in front of)
      const salt = await bcrypt.genSalt(10); // additional data to help encrypt password with. 10 is # of rounds
      user.password = await bcrypt.hash(password, salt);
      await user.save(); //save user to DB

      const payload = {
        user: {
          id: user.id, // id was generated by the database when we said 'new User'
        },
      };

      // Return jsonwebtoken -- when a user registers they can now login RIGHT AWAY
      jwt.sign(
        // The server encodes a json web token payload that contains the unique identifier (i.e. user.id) of the user that signed in using the secret_key
        payload,
        config.get("jwtSecret"),
        { expiresIn: 360000 },
        (err, token) => {
          // now i have an encrypted token which was signed using my secret token and contains the payload
          if (err) throw err;
          res.json({ token: token });
        }
      );
      // we can send the token in headers and access protected routes!!
    } catch (err) {
      console.error(err.message);
      res.status(500).send("Server error");
    }
  }
); // respond to client

module.exports = router;
